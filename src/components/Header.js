import React, { useState, useEffect, useRef } from "react";
import "../css/Header.css";
import 'bootstrap/dist/css/bootstrap.min.css'; 
import { SlMagnifier } from "react-icons/sl";
import { SlArrowDown } from "react-icons/sl";
import {  NavLink } from "react-router-dom";
import { IoMdNotificationsOutline } from "react-icons/io";
import { FaTrash } from "react-icons/fa";
import axios from "axios";


function Header({user}) {
  const [searchTerm, setSearchTerm] = useState("");
  const [notifications, setNotifications] = useState([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô

  // ‡∏î‡∏∂‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
  useEffect(() => {
    if (!user?.userId) return;

    const fetchNotifications = () => {
        axios.get(`http://localhost:3001/notice/notification/${user.userId}`)
            .then((response) => {
                if (response.data.success) {
                    const data = response.data.data || [];
                    setNotifications(data);
                    const unreadNotifications = data.filter((n) => n.status === "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô");
                    setUnreadCount(unreadNotifications.length);
                }
            })
            .catch((error) => console.error("Error loading notifications:", error));
    };

    fetchNotifications();
    const interval = setInterval(fetchNotifications, 30000); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, [user?.userId]);


    const markAsRead = (notificationId) => {
      axios.put(`http://localhost:3001/notice/read/${notificationId}`)
          .then(() => {
              setNotifications((prevNotifications) =>
                  prevNotifications.map((n) =>
                      n.notification_id === notificationId
                          ? { ...n, read_status: "‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" }
                          : n
                  )
              );
              setUnreadCount((prev) => Math.max(prev - 1, 0)); // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
          })
          .catch((error) => console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", error));
    };

  //‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  const deleteNotification = (notificationId) => {
    axios.delete(`http://localhost:3001/notice/notification/${notificationId}`)
    .then(() => {
      setNotifications(notifications.filter((n) => n.notification_id !== notificationId));
      setUnreadCount((prev) => Math.max(prev - 1, 0)); // ‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    })
    .catch((error) => console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", error));
  };

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÉ‡∏à‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
  const handleLikePost = (postId) => {
    console.log("üõ† ‡∏Å‡∏î‡πÑ‡∏•‡∏Å‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå", postId);

    axios.post(`http://localhost:3001/webboard/${postId}/favorite`, {})
        .then((response) => {
            console.log("Response from Backend:", response.data);
        })
        .catch((error) => {
            console.error("Error from Backend:", error.response?.data || error.message);
        });
  };

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
  const handleCommentPost = (postId, comment) => {
    axios.post(`http://localhost:3001/webboard/${postId}/comment`, {
        comment_detail: comment
    })
    .then((response) => {
        console.log("Response from Backend:", response.data);
    })
    .catch((error) => {
        console.error("Error commenting on post:", error.response?.data || error.message);
    });
  };

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  const toggleNotifications = () => {
    setShowNotifications(!showNotifications);
  };

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Dropdown ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showNotifications && !event.target.closest(".notification-dropdown") && !event.target.closest(".notification-icon")) {
        setShowNotifications(false);
      }
    };

    document.addEventListener("click", handleClickOutside);
    return () => document.removeEventListener("click", handleClickOutside);
  }, [showNotifications]);


  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Dropdown ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
  const handleDropdownClick = (event) => {
  event.stopPropagation(); 
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSearchClick = () => {
    console.log("Search Term:", searchTerm);
  };


  return (
    <header className="header">
      <div className="header-top">
        {/* ‡πÇ‡∏•‡πÇ‡∏Å‡πâ */}
        <img className="logo" src="/image/logoCP1.png" alt="College of Computing Logo" />

        {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö */}
        <div className="search-and-login">
          <div className="search">
            <input
              type="text"
              value={searchTerm}
              onChange={handleSearchChange}
              className="form-control"
            />
            <button onClick={handleSearchClick} className="search-icon-btn">
              <SlMagnifier className="search-icon" />
            </button>
          </div>

          {/* ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
          {user ? (
            <div className="user-profile">
              {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
              <div className="notification-container">
              <div className="notification-icon" onClick={toggleNotifications}>
                  <IoMdNotificationsOutline />
                  {unreadCount > 0 && <span className="unread-count">{unreadCount}</span>}
              </div>

                {/* Dropdown ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
                {showNotifications && (
                  <div className="notification-dropdown" onClick={handleDropdownClick}>
                      <h5 className="notification-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h5>
                      {notifications.length > 0 ? (
                          notifications.map((notification) => (
                              <div
                                  key={notification.notification_id}
                                  className={`notification-item ${notification.read_status === "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô" ? "unread" : ""}`}
                                  onClick={() => markAsRead(notification.notification_id)}
                              >
                                  <p className="message">{notification.message}</p>
                                  <p className="notification-date ">{new Date(notification.send_date).toLocaleString()}</p>
                                  <button
                                      className="delete-btn"
                                      onClick={(e) => {
                                          e.stopPropagation(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `markAsRead` ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
                                          deleteNotification(notification.notification_id);
                                      }}
                                  >
                                      <FaTrash />
                                  </button>
                              </div>
                          ))
                      ) : (
                          <p className="no-notifications">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</p>
                      )}
                  </div>
                )}
              </div>
            
                {/* <div className="user-profile"> */}
              {/* ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
              <NavLink to="/alumni-profile" className="profile-container">
                <img
                  src={`${user.profilePicture}` || "/profile-picture.png"}
                  alt="User Profile"
                  className="profile-img"
                  style={{ cursor: "pointer" }}
                />
              </NavLink>

              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
              <div className="user-info mt-2 text-center">
                <p className="user-role mb-1">{user.role === 0 ? "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" : "‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤"}</p>
                <p className="user-major text-muted small">{user.major || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏Ç‡∏≤"}</p>
              </div>
            </div>
          ) : (
            <NavLink to="/login">
              <button className="login-btn m-2 ms-5">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
            </NavLink>
          )}
        </div>
      </div>

      <nav>
        <ul className="nav">
          <li className="nav-item">
            <NavLink 
              to="/" 
              className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
            >
              ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </NavLink>
          </li>
          <li className="nav-item">
            <NavLink 
              to="/about" 
              className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
            >
              ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö
            </NavLink>
          </li>          
          <li className="dropdown">
            <div className="dropbtn">‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</div>
            <SlArrowDown className="arrow-down"/>
            <div className="dropdown-content">
              <NavLink 
                to="/news" 
                className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
              >
                ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
              </NavLink>
              <NavLink 
                to="/activity" 
                className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
              >
                ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
              </NavLink>
            </div>
          </li>
          <li className="nav-item">
            <NavLink 
              to="/donate" 
              className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
            >
              ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ
            </NavLink>
          </li>
          <li className="nav-item">
            <NavLink 
              to="/alumni" 
              className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
            >
              ‡∏ó‡∏≥‡πÄ‡∏ô‡∏µ‡∏¢‡∏ö‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤
            </NavLink>
          </li>
          <li className="nav-item">
            <NavLink 
              to="/souvenir" 
              className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
            >
              ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å
            </NavLink>
          </li>
          <li className="nav-item">
            <NavLink 
              to="/webboard" 
              className={({ isActive }) => isActive ? "nav-link active-link" : "nav-link"}
            >
              ‡πÄ‡∏ß‡πá‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î
            </NavLink>
          </li>
        </ul>
      </nav>
    </header>

    
  );
}

export default Header;
